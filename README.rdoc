= Inkwell
=======

Inkwell provides simple way to add social networking features like comments, reblogs, favorites, following/followers, communities and timelines to your Ruby on Rails application.

Russian translation of README file available here[https://github.com/salkar/inkwell/blob/master/README_RU.rdoc].

== Requirements
You should have two classes: User and Post or other identical. Between them should be a one-to-many relationship. For example:

  class User < ActiveRecord::Base
    has_many :posts
  end

  class Post < ActiveRecord::Base
    belongs_to :user
  end

If you want to use communities, then you need to have <code>Community</code> class, too:

  class Community < ActiveRecord::Base
  end

== Installation

Put in <code>Gemfile</code>:

  gem 'inkwell', :git => 'git://github.com/salkar/inkwell.git'


After it do <code>bundle install</code>

Add to your <code>User</code> model <code>acts_as_inkwell_user</code> and to your <code>Post</code> model <code>acts_as_inkwell_post</code>

  class User < ActiveRecord::Base
    has_many :posts
    acts_as_inkwell_user
  end
  
  class Post < ActiveRecord::Base
    belongs_to :user
    acts_as_inkwell_post
  end

If you want to use communities, then add to your <code>Community</code> model <code>acts_as_inkwell_community</code>:
  
  class Community < ActiveRecord::Base
    acts_as_inkwell_community
  end

Create <code>inkwell.rb</code> file in <code>config/initializers</code> and put in it your names of <code>User</code> and <code>Post</code> tables (or other identical). 
Put in it name of <code>Community</code> table if you want to use it:

  module Inkwell
    class Engine < Rails::Engine
      config.post_table = :posts
      config.user_table = :users
      config.community_table = :communities #if you want to use communities
    end
  end

Next, get gem migrations:

  rake inkwell:install:migrations

and <code>db:migrate</code> it.

== Usage

=== Favorite features

User is able to favorite posts/comments:

  @user.favorite @post
  @user.favorite @comment

For delete post/comment from favorites you should do:

  @user.unfavorite @post

For check that post/comment enters in favorites you should do:

  @user.favorite? @post

For return favorite line, consisting of favorited posts and comments, you should do:

  @user.favoriteline(:last_shown_obj_id => nil, :limit => 10, :for_user => nil)

where 
* <code>last_shown_obj_id</code> - id of the last item in favorite line shown to the user. Get it from <code>item_id_in_line</code> property of last item from previous <code>favoriteline</code> calls. This parameter is for pagination and separation of the timeline.

    fline = @user.favoriteline    #get first 10 items from @user favorite line
    last_shown_obj_id = fline.last.item_id_in_line
    fline_next_page = @user.favoriteline :last_shown_obj_id => last_shown_obj_id    #get next 10 items from @user favorite line

* <code>limit</code> - number of returned favorited items

    fline = @user.favoriteline :limit => 20    #return first 20 items from @user favorite line

* <code>for_user</code> - <code>User</code>, who looks this favorite line. For him <code>is_reblogged</code> and <code>is_favorited</code> properties will been formed. 
  
    @user.favorite @another_user_post
    @user.reblog @another_user_post
      
    fline_for_unknown_user = @another_user.favoriteline
    # For example, fline_for_unknown_user.first == @another_user_post
    fline_for_unknown_user.first.is_reblogged    # => false
    fline_for_unknown_user.first.is_favorited    # => false
        
    fline_for_user_who_reblog_and_favorite_another_user_post = @another_user.favoriteline :for_user => @user
    # For example, fline_for_user_who_reblog_and_favorite_another_user_post.first == @another_user_post
    fline_for_user_who_reblog_and_favorite_another_user_post.first.is_reblogged    # => true
    fline_for_user_who_reblog_and_favorite_another_user_post.first.is_favorited    # => true

More examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/favorite_spec.rb].

=== Reblog features

Reblog means that reblogged post will be added to user's blogline and to timelines of his followers. Thus, the behavior of reblogged object is similar to the post of the user who made this reblog.
User is able to reblog posts/comments:

  @user.reblog @post
  @user.reblog @comment

For delete post/comment from reblogs you should do:

  @user.unreblog @post

For check that post/comment enters in reblogs you should do:

  @user.reblog? @post

Reblogs don't have their own line and are contained in user's blogline.

More examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/reblog_spec.rb].

=== Comment features

User is able to create comments for post or other comment. If you want to comment the post you should do:

  @user.comments.create :post_id => @post.id, :body => "comment_body"

If you want to comment other comment you should add <code>parent_id</code> of parent comment:

  @user.comments.create :post_id => @parent_post.id, :body => "comment_body", :parent_id => @parent_comment.id

For delete comment you should use <code>destroy</code> method:

  @comment.destroy

You are able to get comment line for post or comment. It consists of comments for this object in reverse chronological order.

<i>Notice: returned array will have back order to simplify the use. Last comment is at the bottom usually.</i>

For get comment line you should do:

  commentline(:last_shown_comment_id => nil, :limit => 10, :for_user => nil)

where <code>last_shown_comment_id</code> is id of last shown comment from previous commentline results. For example:

  cline = @post.commentline    #get last 10 comments for @post
  last_shown_comment_id = cline.first.id    # First element is taken due to reverse order. In fact, it is the oldest of these comments.
  cline_next_page = @post.commentline :last_shown_comment_id => last_shown_comment_id

<code>Limit</code> and <code>for_user</code> mean the same thing as in the favoriteline[https://github.com/salkar/inkwell#favorite-features].

More examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/comments_spec.rb].

=== Follow features

User is able to follow another user. It allows him to get followed user's blogline in his timeline.

For follow user you should do:

  @user.follow @another_user

After it last 10 <code>@another_user</code> blogline's items will be transferred to <code>@user</code> timeline. And each new <code>@another_user</code> blogline item will be added to <code>@user</code> timeline

For unfollow user you should do:

  @user.unfollow @another_user

For check that user is follower of another user you should do:

  @user.follow? @another_user

For get followers ids for user and ids of users, which he follow, you should do:

  @user.followers_row
  @user.followings_row

Both methods return arrays of ids.

More examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/following_spec.rb].

=== Blogline feature

User blogline is consists of his posts and his reblogs. For get it you should do:

  @user.blogline(:last_shown_obj_id => nil, :limit => 10, :for_user => nil)

where parameters are similar with described above[https://github.com/salkar/inkwell#favorite-features] favoriteline parameters.

More examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/blogline_spec.rb].

=== Timeline feature

User timeline is consists of items from bloglines of users, which he follow. For get it you should do:

  @user.timeline(:last_shown_obj_id => nil, :limit => 10, :for_user => nil)

where parameters are similar with described above[https://github.com/salkar/inkwell#favorite-features] favoriteline parameters.

More examples you can find in this spec[https://github.com/salkar/inkwell/blob/master/test/dummy/spec/functional/timeline_spec.rb].

=== Community feature

Community is association of users. It has own blogline, consisting of posts of its members. Community member can send his post to the community blogline.
Then this post is added to the timelines of other community users.

